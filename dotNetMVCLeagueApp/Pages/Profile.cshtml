@page
@using dotNetMVCLeagueApp.Config
@model dotNetMVCLeagueApp.Pages.Profile

@{
    Layout = "_Layout";
    ViewData["Title"] = $"Stats - {Model.SummonerData.Summoner.Name}";
}

@if (Model.ErrorMessage is not null) {
    <div class="container-fluid" id="ErrorMessage">
        <div class="row d-flex justify-content-center">
            <div class="alert alert-danger alert-error text-center m-4 w-25" role="alert">
                @Model.ErrorMessage
            </div>
        </div>

    </div>
}

@section Scripts {
    <script src="~/js/autohide.js"></script>
}

<div class="row d-flex justify-content-around">

    <div class="col-lg-3 col-xs-12 order-xs-1 order-lg-0" id="summonerInfoPartial">
        @{ await Html.RenderPartialAsync("Partials/Profile/_SummonerInfoPartial", Model.SummonerData.Summoner); }
    </div>

    <div class="col-lg-auto col-xs-12 order-xs-2 order-lg-1">
        <div id="pageFilter" class="mb-4">
            <button data-toggle="collapse" data-target="#filterForm" class="btn btn-primary rounded-corners-small">
                <i class="fas fa-filter"></i> Filters
            </button>

            <div id="filterForm" class="collapse">
                <form method="get">
                    <input type="hidden" id="name" asp-for="QueryParams.Name" value="@Model.QueryParams.Name">
                    <input type="hidden" id="server" asp-for="QueryParams.Server" value="@Model.QueryParams.Server">
                    <label asp-for="QueryParams.Filter">Type of Queue</label>
                    <select id="filter" class="browser-default mb-1 custom-select rounded-corners-small"
                            asp-for="QueryParams.Filter">
                        @foreach (var (filterKey, filterVal) in Model.QueueFilters) {
                            <option value="@filterKey">@filterVal</option>
                        }
                    </select>

                    <label asp-for="QueryParams.PageSize">Games Per Page</label>
                    <select asp-for="QueryParams.PageSize"
                        id="pageSize" class="browser-default mb-1 custom-select rounded-corners-small">
                        @foreach (var pageSize in Model.NumberOfGames) {
                            <option value="@pageSize">@pageSize</option>
                        }
                    </select>

                    <button type="submit" class="btn btn-primary rounded-corners-small float-right">
                        Submit
                    </button>
                </form>
            </div>

            <div id="PageButtons">
                @{
                    // Toto se stane pouze tedhy pokud budeme umyslne upravovat query string
                    var offsetNextPage = Model.QueryParams.PageSize + Model.QueryParams.Offset < ServerConstants.GamesLimit ?
                        Model.QueryParams.Offset + Model.QueryParams.PageSize : ServerConstants.GamesLimit - Model.QueryParams.PageSize;

                    var paramsNextPage = new Dictionary<string, string> {
                        {"name", Model.QueryParams.Name},
                        {"server", Model.QueryParams.Server},
                        {"pageSize", Model.QueryParams.PageSize.ToString()},
                        {"filter", Model.QueryParams.Filter},
                        {"offset", offsetNextPage.ToString()}
                    };

                    var offsetPrevPage = Model.QueryParams.Offset - Model.QueryParams.PageSize < 0 ?
                        0 : Model.QueryParams.Offset - Model.QueryParams.PageSize;
                    var paramsPreviousPage = new Dictionary<string, string> {
                        {"name", Model.QueryParams.Name},
                        {"server", Model.QueryParams.Server},
                        {"pageSize", Model.QueryParams.PageSize.ToString()},
                        {"filter", Model.QueryParams.Filter},
                        {"offset", offsetPrevPage.ToString()}
                    };
                }

                @if (Model.SummonerData.MatchHeaders.Count > Model.QueryParams.PageSize - 1 && Model.QueryParams.PageSize + Model.QueryParams.Offset < ServerConstants.GamesLimit) {
                    <a asp-all-route-data="paramsNextPage" class="btn btn-primary rounded-corners-small float-right">
                        <i class="fas fa-angle-right"></i>
                    </a>
                }
                
                
                @if (Model.QueryParams.Offset - Model.QueryParams.PageSize >= 0) {
                    <a asp-all-route-data="paramsPreviousPage" class="btn btn-primary rounded-corners-small float-right">
                        <i class="fas fa-angle-left"></i>
                    </a>
                }

            </div>
        </div>

        <div id="matchListPartial">
            <div id="matchOverview">
                @{
                    if (Model.SummonerData.MatchListOverview.TotalStats.Wins + Model.SummonerData.MatchListOverview.TotalStats.Losses > 0) {
                        await Html.RenderPartialAsync("Partials/Profile/_MatchListOverviewPartial", Model.SummonerData.MatchListOverview);
                    }
                    else {
                        <div class="row d-flex justify-content-center">
                            <div class="col-md-6">
                                @if (Model.QueryParams.Offset > 0) {
                                    <p class="no-spacing">
                                        No more games for the account in the last month.
                                        Try previous pages or without queue filters.
                                    </p>
                                }
                                else {
                                    <p class="no-spacing">No Games for the account in the last month or it has not yet been updated.</p>
                                }
                            </div>
                        </div>
                    }
                }
            </div>

            <div id="pages" class="d-flex row justify-content-end mb-4 pr-4">
            </div>

            <div id="matches">
                @{
                    var headerRenders = new List<Task>(Model.SummonerData.MatchHeaders.Count);
                    headerRenders.AddRange(Model.SummonerData.MatchHeaders.Select(match => Html.RenderPartialAsync("Partials/Profile/_MatchHeaderPartial", match)));
                    await Task.WhenAll(headerRenders);
                }
            </div>

        </div>
    </div>

    <div class="col-lg-3 col-xs-12 order-xs-0 order-lg-2 card-dark-text">
    </div>
</div>