// <auto-generated />

using System;
using LeagueStatAppReact.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace LeagueStatAppReact.Migrations
{
    [DbContext(typeof(LeagueDbContext))]
    partial class LeagueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.2.21154.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.ChampionBanModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChampionId")
                        .HasColumnType("int");

                    b.Property<int>("PickTurn")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamStatsInfoModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamStatsInfoModelId");

                    b.ToTable("ChampionBanModels");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.MatchInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PlayTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SummonerInfoModelId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SummonerInfoModelId");

                    b.ToTable("MatchInfoModels");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.PlayerInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CsDiffAt10")
                        .HasColumnType("float");

                    b.Property<double?>("CsPerMinute")
                        .HasColumnType("float");

                    b.Property<double?>("GoldDiffAt10")
                        .HasColumnType("float");

                    b.Property<string>("Lane")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchInfoModelId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerStatsModelId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileIcon")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spell1Id")
                        .HasColumnType("int");

                    b.Property<int>("Spell2Id")
                        .HasColumnType("int");

                    b.Property<string>("SummonerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummonerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchInfoModelId");

                    b.HasIndex("PlayerStatsModelId");

                    b.ToTable("PlayerInfoModels");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.PlayerStatsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("ChampLevel")
                        .HasColumnType("int");

                    b.Property<int>("CombatPlayerScore")
                        .HasColumnType("int");

                    b.Property<long>("DamageDealtToObjectives")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageSelfMitigated")
                        .HasColumnType("bigint");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("DoubleKills")
                        .HasColumnType("int");

                    b.Property<bool>("FirstBloodKill")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstInhibitorKill")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstTowerKill")
                        .HasColumnType("bit");

                    b.Property<int>("GoldEarned")
                        .HasColumnType("int");

                    b.Property<int>("InhibitorKills")
                        .HasColumnType("int");

                    b.Property<int>("Item0")
                        .HasColumnType("int");

                    b.Property<int>("Item1")
                        .HasColumnType("int");

                    b.Property<int>("Item2")
                        .HasColumnType("int");

                    b.Property<int>("Item3")
                        .HasColumnType("int");

                    b.Property<int>("Item4")
                        .HasColumnType("int");

                    b.Property<int>("Item5")
                        .HasColumnType("int");

                    b.Property<int>("Item6")
                        .HasColumnType("int");

                    b.Property<int>("KillingSprees")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("LargestCriticalStrike")
                        .HasColumnType("int");

                    b.Property<int>("LargestKillingSpree")
                        .HasColumnType("int");

                    b.Property<int>("LargestMultiKill")
                        .HasColumnType("int");

                    b.Property<long>("MagicDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicalDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<int>("NeutralMinionsKilled")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("PentaKills")
                        .HasColumnType("int");

                    b.Property<int>("Perk0")
                        .HasColumnType("int");

                    b.Property<int>("Perk0Var1")
                        .HasColumnType("int");

                    b.Property<int>("Perk0Var2")
                        .HasColumnType("int");

                    b.Property<int>("Perk0Var3")
                        .HasColumnType("int");

                    b.Property<int>("Perk1")
                        .HasColumnType("int");

                    b.Property<int>("Perk1Var1")
                        .HasColumnType("int");

                    b.Property<int>("Perk1Var2")
                        .HasColumnType("int");

                    b.Property<int>("Perk1Var3")
                        .HasColumnType("int");

                    b.Property<int>("Perk2")
                        .HasColumnType("int");

                    b.Property<int>("Perk2Var1")
                        .HasColumnType("int");

                    b.Property<int>("Perk2Var2")
                        .HasColumnType("int");

                    b.Property<int>("Perk2Var3")
                        .HasColumnType("int");

                    b.Property<int>("Perk3")
                        .HasColumnType("int");

                    b.Property<int>("Perk3Var1")
                        .HasColumnType("int");

                    b.Property<int>("Perk3Var2")
                        .HasColumnType("int");

                    b.Property<int>("Perk3Var3")
                        .HasColumnType("int");

                    b.Property<int>("Perk4")
                        .HasColumnType("int");

                    b.Property<int>("Perk4Var1")
                        .HasColumnType("int");

                    b.Property<int>("Perk4Var2")
                        .HasColumnType("int");

                    b.Property<int>("Perk4Var3")
                        .HasColumnType("int");

                    b.Property<int>("Perk5")
                        .HasColumnType("int");

                    b.Property<int>("Perk5Var1")
                        .HasColumnType("int");

                    b.Property<int>("Perk5Var2")
                        .HasColumnType("int");

                    b.Property<int>("Perk5Var3")
                        .HasColumnType("int");

                    b.Property<int>("PerkPrimaryStyle")
                        .HasColumnType("int");

                    b.Property<int>("PerkSubStyle")
                        .HasColumnType("int");

                    b.Property<long>("PhysicalDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<int>("QuadraKills")
                        .HasColumnType("int");

                    b.Property<int>("SightWardsBoughtInGame")
                        .HasColumnType("int");

                    b.Property<int>("StatPerk0")
                        .HasColumnType("int");

                    b.Property<int>("StatPerk1")
                        .HasColumnType("int");

                    b.Property<int>("StatPerk2")
                        .HasColumnType("int");

                    b.Property<int>("TeamObjective")
                        .HasColumnType("int");

                    b.Property<long>("TimeCCingOthers")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalHeal")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalMinionsKilled")
                        .HasColumnType("int");

                    b.Property<int>("TotalPlayerScore")
                        .HasColumnType("int");

                    b.Property<int>("TotalTimeCrowdControlDealt")
                        .HasColumnType("int");

                    b.Property<int>("TotalUnitsHealed")
                        .HasColumnType("int");

                    b.Property<int>("TripleKills")
                        .HasColumnType("int");

                    b.Property<long>("TrueDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<int>("TurretKills")
                        .HasColumnType("int");

                    b.Property<long>("VisionScore")
                        .HasColumnType("bigint");

                    b.Property<int>("WardsKilled")
                        .HasColumnType("int");

                    b.Property<int>("WardsPlaced")
                        .HasColumnType("int");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PlayerStatsModel");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.TeamStatsInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaronKills")
                        .HasColumnType("int");

                    b.Property<int>("DragonKills")
                        .HasColumnType("int");

                    b.Property<bool>("FirstBaron")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstBlood")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstDragon")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstInhibitor")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstRiftHerald")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstTower")
                        .HasColumnType("bit");

                    b.Property<int>("InhibitorKills")
                        .HasColumnType("int");

                    b.Property<int?>("MatchInfoId")
                        .HasColumnType("int");

                    b.Property<int>("RiftHeraldKills")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TowerKills")
                        .HasColumnType("int");

                    b.Property<string>("Win")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchInfoId");

                    b.ToTable("TeamStatsInfoModels");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.SummonerPage.QueueInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeaguePoints")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("QueueType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SummonerInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Tier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SummonerInfoId");

                    b.ToTable("QueueInfoModels");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.SummonerPage.SummonerInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EncryptedAccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedSummonerId")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileIconId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SummonerLevel")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SummonerInfoModels");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.ChampionBanModel", b =>
                {
                    b.HasOne("dotNetMVCLeagueApp.Data.Models.Match.TeamStatsInfoModel", "TeamStatsInfoModel")
                        .WithMany("Bans")
                        .HasForeignKey("TeamStatsInfoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamStatsInfoModel");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.MatchInfoModel", b =>
                {
                    b.HasOne("dotNetMVCLeagueApp.Data.Models.SummonerPage.SummonerInfoModel", "SummonerInfoModel")
                        .WithMany()
                        .HasForeignKey("SummonerInfoModelId");

                    b.Navigation("SummonerInfoModel");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.PlayerInfoModel", b =>
                {
                    b.HasOne("dotNetMVCLeagueApp.Data.Models.Match.MatchInfoModel", "MatchInfoModel")
                        .WithMany("PlayerInfoList")
                        .HasForeignKey("MatchInfoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotNetMVCLeagueApp.Data.Models.Match.PlayerStatsModel", "PlayerStatsModel")
                        .WithMany()
                        .HasForeignKey("PlayerStatsModelId");

                    b.Navigation("MatchInfoModel");

                    b.Navigation("PlayerStatsModel");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.TeamStatsInfoModel", b =>
                {
                    b.HasOne("dotNetMVCLeagueApp.Data.Models.Match.MatchInfoModel", "MatchInfo")
                        .WithMany("Teams")
                        .HasForeignKey("MatchInfoId");

                    b.Navigation("MatchInfo");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.SummonerPage.QueueInfoModel", b =>
                {
                    b.HasOne("dotNetMVCLeagueApp.Data.Models.SummonerPage.SummonerInfoModel", "SummonerInfo")
                        .WithMany("QueueInfo")
                        .HasForeignKey("SummonerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SummonerInfo");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.MatchInfoModel", b =>
                {
                    b.Navigation("PlayerInfoList");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.Match.TeamStatsInfoModel", b =>
                {
                    b.Navigation("Bans");
                });

            modelBuilder.Entity("dotNetMVCLeagueApp.Data.Models.SummonerPage.SummonerInfoModel", b =>
                {
                    b.Navigation("QueueInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
